<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

	<!-- 커스텀로긴석세스핸들러 이름을 커스텀로긴석세스로 하겠다.-->
	<bean id="customLoginSuccess" class="com.myspring.security.domain.CustomLoginSuccessHandler"></bean>

	<!-- 암호화를 위한 bean 객체 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

	<bean id="customUserDetailsService"
	class="com.myspring.security.domain.CustomUserDetailsService"/>
	
	<security:http>
<!-- 		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER)"/>
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN)"/>	 -->	
		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/>
		<security:csrf disabled="true"/>
	</security:http>
	
	
	<!-- provider인 customUserDetailsService를 거쳐야함. 반드시 암호화 해야하므로 bcryptPasswordEncoder를 참조하겠다. -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>